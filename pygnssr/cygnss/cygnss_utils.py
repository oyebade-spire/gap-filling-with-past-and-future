import numpy as np


__author__ = "Vahid Freeman"
__copyright__ = "Copyright 2019, Spire Global"
__credits__ = ["Vahid Freeman"]
__license__ = ""
__version__ = ""
__maintainer__ = "Vahid Freeman"
__email__ = "vahid.freeman@spire.com"
__status__ = "development"

def get_mask(qflags):
    """
    :param qflags: CYGNSS 'quality_flags' variable (read from CYGNSS netCDF Dataset object)
    :return: numpy boolean array with shape as input data file
    """


    mask = ((np.bitwise_and(qflags, 8) != 0) |    #8 = large_sc_attitude_err
            (np.bitwise_and(qflags, 16) != 0) |    #16 = black_body_ddm
            (np.bitwise_and(qflags, 32) != 0) |    #32 = ddmi_reconfigured
            (np.bitwise_and(qflags, 128) != 0) |   #128 = ddm_is_test_pattern
            (np.bitwise_and(qflags, 256) != 0) |   #256 = channel_idle
            (np.bitwise_and(qflags, 32768) != 0) |   #32768 = direct_signal_in_ddm
            (np.bitwise_and(qflags, 65536) != 0) |  #65536  = low_confidence_gps_eirp_estimate
            (np.bitwise_and(qflags, 131072) != 0) |    #131072 = rfi_detected
            (np.bitwise_and(qflags, 2097152) != 0) |   #2097152 = gps_pvt_sp3_error
            (np.bitwise_and(qflags, 4194304) != 0) |   #4194304 = sp_non_existent_error.
            (np.bitwise_and(qflags, 16777216) != 0) )  #16777216 = ant_data_lut_range_error


    #8 = absolute value of the spacecraft roll is greater than or equal to 30 degrees, the pitch is greater than or equal to 10 degrees, or the yaw is greater than or equal to 5 degrees.
    #16 = the black body load was selected during the DDM sampling period.
    #32 = the DDMI was reconfigured during the DDM sampling period.
    #128 = the DDM is a test pattern generated by the DDMI.
    #256 =  reflectometry channel was not tracking a PRN.
    #32768 = direct_signal_in_ddm: Set if the absolute value of the difference
    #65536 = there is low confidence in the GPS effective isotropic radiated power estimate.
    #131072 = the kurtosis of the DDM noise floor deviates from pure Gaussian (3.0) by more than 1.0.
    #2097152 = Cannot calculate GPS SV position/velocity/time from SP3 file.
    #4194304 = Specular point does not exist.
    #16777216 = Unable to index into antenna data lookup table.




    # pre-corrected SNR value < 2 dB
    # receiver antenna gain < 0
    # incidence angle > 65
    # Pr coming in at a delay bin outside of 7-10 pixels (exclusive)
    # pre-corrected SNR must be less than or equal to the receiver antenna gain + 14
    # receiver gain is > 13 and corrected Pr < 0

    # elevation gt 600m
    # water bodies mask using 30m layer Pekel et al. (2016) dataset (https://global-surfacewater.appspot.com)

    return mask

def get_sv_bias(sv):
    """
    This program returns bias correction value for each individual GPS Space Vehicle (SV)
    The bias correction values are calculated by time series analysis of CYGNSS data (2018-01-01 to 2019-05-31)
    in a region in desert where the reflectivity is above -5dB and the sensitivity below 5dB

    :param scalar, sv:GPS Space Vehicle number
    :return: bias correction value in dB
    """
    sv_dict = {'34': 0.5, '41': 0.3, '43': -0.3, '44': -0.8, '45': 0.7, '46': 0.2, '47': 0.8,
               '48': 0.6, '50': 0.4, '51': 0, '52': 0.8, '53': 0.6, '54': 0, '55': 0.2, '56': 0.2,
               '57': 0.7, '58': 0.6, '59': -0.5, '60': 0.7, '61': 0.4, '62': -1, '63': -1, '64': -1,
               '65': -1.4, '66': -0.8, '67': 0, '68': -1.5, '69': -1.5, '70': -0.4, '71': -0.5, '72': -0.8, '73': 0.6}


    if str(sv).strip() in sv_dict.keys():
        return sv_dict[str(sv).strip()]
    else:
        # returns 0dB correction if the SV number is unknown
        return 0